%YAML 1.2
---
# See http://www.sublimetext.com/docs/syntax.html
file_extensions:
  - hug
scope: source.hug
variables:
  ident: "[A-Za-z_][A-Za-z_0-9]*"
contexts:
  main:
    # Strings begin and end with quotes, and use backslashes as an escape
    # character
    - match: '"'
      scope: punctuation.definition.string.begin.hug
      push: double_quoted_string

    # Comments begin with a '//' and finish at the end of the line
    - match: '//'
      scope: punctuation.definition.comment.hug
      push: line_comment

    - match: '\/\*'
      scope: punctuation.definition.comment.hug
      push: block_comment

    - match: '@{{ident}}'
      scope: variable.annotation.hug

    - match: '\b(enum|private|public|import)\b'
      scope: keyword.control.hug

    - match: '\b(implement)\b'
      scope: keyword.variable.hug
      push:
        - meta_scope: entity.name.type
        - match: '{'
          scope: punctuation.section.block.start.hug
          pop: true
        - match: '\bfor\b'
          scope: keyword.control.hug

    - match: '\b(let|type|module|function|trait|struct)\b'
      scope: keyword.variable.hug
      push:
        - meta_scope: entity.name.variable.hug
        - match: ':'
          push:
            - meta_scope: punctuation.definition.type.hug
            - match: '.*?{{ident}}'
              scope: entity.name.type.hug
              pop: true
        - match: '='
          scope: punctuation.definition.numeric.hug
          pop: true
        - match: '(\{|\()'
          scope: punctuation.section.block.start.hug
          pop: true

    # Numbers
    - match: '\b(-)?[0-9.]+\b'
      scope: constant.numeric.hug

    - match: '{{ident}}(?=\()'
      scope: entity.name.function.hug

  double_quoted_string:
    - meta_scope: string.quoted.double.hug
    - match: '\\.'
      scope: constant.character.escape.hug
    - match: '"'
      scope: punctuation.definition.string.end.hug
      pop: true

  line_comment:
    - meta_scope: comment.line.hug
    - match: $
      pop: true

  block_comment:
    - meta_scope: comment.block.hug
    - match: '\*\/'
      pop: true
